from . import DatasetFactory, DatasetSplitter, DatasetSampler
from pathlib import Path
import h5py
import numpy as np
import pandas as pd

class_to_index = {'OOK': 0,
                  '4ASK': 1,
                  '8ASK': 2,
                  'BPSK': 3,
                  'QPSK': 4,
                  '8PSK': 5,
                  '16PSK': 6,
                  '32PSK': 7,
                  '16APSK': 8,
                  '32APSK': 9,
                  '64APSK': 10,
                  '128APSK': 11,
                  '16QAM': 12,
                  '32QAM': 13,
                  '64QAM': 14,
                  '128QAM': 15,
                  '256QAM': 16,
                  'AM-SSB-WC': 17,
                  'AM-SSB-SC': 18,
                  'AM-DSB-WC': 19,
                  'AM-DSB-SC': 20,
                  'FM': 21,
                  'GMSK': 22,
                  'OQPSK': 23}

index_to_class = {v: k for k, v in class_to_index.items()}


class RadioMLDataset(DatasetFactory):
    """Factory to split and sample RadioML dataset"""

    def get_splitter(self, input_file: Path):
        return RadioMLSplitter(input_file=input_file)

    def get_sampler(self, input_file: Path, sampled_indices_file: Path):
        return RadioMLSampler(input_file=input_file, sampled_indices_file=sampled_indices_file)

    @staticmethod
    def get_modulation_df(input_file: Path):
        """Reads from input_file and returns a dataframe with modulation_id and snr columns"""
        with h5py.File(input_file, 'r') as hdf_file:
            modulation_one_hot = hdf_file['Y'][:]
            snr_values = hdf_file['Z'][:].flatten()

            # Changing one-hot encoding to class indices
            modulation_id = np.apply_along_axis(lambda x: np.argmax(x), 1, modulation_one_hot)

            # Combine snr_values and modulation_id into a dataframe
            modulation_df = pd.DataFrame({'modulation_id': modulation_id, 'snr': snr_values})
            return modulation_df


class RadioMLSplitter(DatasetSplitter):
    """Splits RadioML dataset into train/test subsets and saves their indices to files"""

    def __init__(self, input_file: Path):
        self.input_file = input_file
        self.test_indices = None
        self.train_indices = None

    def split(self, test_proportion: float):
        modulation_df = RadioMLDataset.get_modulation_df(self.input_file)

        # Split dataframe into train and test dataframes
        test_df = modulation_df.groupby(['modulation_id', 'snr']).sample(frac=test_proportion)
        train_df = modulation_df[~modulation_df.index.isin(test_df.index)]

        self.train_indices = pd.Series(train_df.index)
        self.test_indices = pd.Series(test_df.index)

    def save_to_file(self, train_output_file: Path, test_output_file: Path):
        self.train_indices.to_csv(train_output_file, index=False, header=False)
        self.test_indices.to_csv(test_output_file, index=False, header=False)


class RadioMLSampler(DatasetSampler):
    """Samples RadioML dataset, formats it and saves to file

    Attributes:
        input_file: path to input file (csv-file generated for example with RadioMLSplitter)
        sampled_indices: indices generated by sampler
    """

    def __init__(self, input_file: Path, sampled_indices_file: Path):
        self.input_file = input_file
        self.sampled_indices = pd.read_csv(sampled_indices_file, header=None).iloc[:, 0]
        self.df = None

    def sample(self, cases_per_class: int):
        modulation_df = RadioMLDataset.get_modulation_df(self.input_file)
        df = modulation_df.groupby(['modulation_id', 'snr']).sample(n=cases_per_class)
        self.sampled_indices = pd.Series(df.index).sort_values()

    def format_data(self):
        with h5py.File(self.input_file, 'r') as hdf_file:
            point_clouds = hdf_file['X'][self.sampled_indices, :, :]
            modulation_one_hot = hdf_file['Y'][self.sampled_indices]
            snr_values = hdf_file['Z'][self.sampled_indices].flatten()

            # Changing one-hot encoding to class indices
            modulation_id = np.apply_along_axis(lambda x: np.argmax(x), 1, modulation_one_hot)

            # Creating output dataframe
            df = pd.DataFrame({
                'point_cloud': list(point_clouds),
                'modulation_id': modulation_id,
                'SNR': snr_values},
                index=self.sampled_indices)
            df['modulation_type'] = df.modulation_id.apply(lambda x: index_to_class[x])
            self.df = df

    def save_to_file(self, output_file: Path):
        self.df.to_pickle(output_file)
